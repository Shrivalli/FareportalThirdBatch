.NET framework - 2019 - latest version - 4.72 - windows os
.NET core - 1.0, 1.1, 2.0, 2.1, 2.2, 3.0, 5.0,6.0 and 7.0 - windows, mac, linux os

Types of Projects/Applications:
1. Desktop apps - console (without GUI) / windows(wpf) - with GUI
2. Web apps - client, server
3. mobile apps - xamarin 

what is .NET core - framework

1. platform - develop, compile, execute the projects
2. BCL - base class libraries 
3. CLR - Common Language Runtime 
4. Programming Languages - C#.NET, VB.NET, F#.NET

C# source code --> C# compiler --> MSIL/CIL (Microsoft Intermediate Language)--> CLR
VB source code --> VB compiler --> MSIL/CIL --> CLR (JIT compiler) --> Native code --> OS

.NET core does not support pointers and multiple inheritance
Memory management is taken care by CLR

Managed code - Codes that can be managed by CLR.
Unmanaged code - CLR does not take the responsibility of these unmanaged codes.

CLS - Common Language specification - set of rules that any language as a part of 
.net family should follow
CTS - Common Type System -
int i;
i:number 
Dim i as integer
integer i;

To create a new project in .NET core:
1. dotnet new console --name firstconsoleapp

source code --> compile(syntax error is checked) --> build (dependencies are linked)
--> executed 

2. dotnet build - compiles and builds our project
bin folder is getting created after build is successful.

3. dotnet run - to execute the output of the project

object is the datatype in which all other datatypes can be stored without conversion.

Type conversions:
1. Implicit - int --> float (automatically) 
2. Explicit - float --> int ( loss of data)
3. Boxing - convert a value type to a reference type 
4. UnBoxing - convert a reference type to a value type

Datatypes in .NET core 
1. int, float, datetime, bool, struct, enum - value types
2. string, object, class, delegates, interface - reference types

int i=10;
string s="Ram"; --> s contains the address of the memory which holds Ram
Eg: Console.ReadLine() --> returns string --> int, bool, datetime, float --> Unboxing

In a solution, there can be multiple projects
In a project, there can be multiple namespaces
In a namespace, there can be multiple classes,.....

1. create a console app in c# to get three marks and calculate the average.
If avg is between 40 and 50 - pass
50 - 60 - average
60-70- good
70-80 - excellent
80-100- outstanding
using if else

2. create a console app in c# to get the age of a person
and print senior citizen if above 60
adult - 30 - 60
youngster - 15-30
child - below 15
using switch case


OOPS concept:

1. Class - Generalization concepts - User defined datatype
A class is an entity which has its own member variables and member functions.
2. Object - specializaiton - instance of a class
3. Data Encapsulation - wrapping of member variables and methods into an entity called class.
4. Data Abstraction - Hiding of unnecessary details and projecting necessary information to the client app.

Data abstraction is implemented through access specifiers:
1. private - 
2. protected
3. internal - with in the same namespace 
4. public 

class member variables are private by default.
namespace - public
class - internal

Properties: getters and setters
public int Eid{get;set;}
read only properties 

public int Eid{get;}

Inheritance

virtual methods - Those methods which have definition in the base class and are allowing the derived 
class to have their own definitions by overriding these methods in the derived class.

If the reference variable is of base class and the memory is alloted of derived
Shape s =new Rectange

1. if new method is in derived class - base class method is called
2. if override method is in derived class - derived class method is called

Day 3:

Abstract method:
A method without a definition or an implementation is called an abstract method.

Abstract class:
Abstract class can contain both abstract and non abstract methods.
Abstract classes cannot be instantiated because it contains a method without a definition.
It has to be inherited.

Sealed class:
Sealed classes cannot be inherited and has to be instantiated.

Partial class:
Definitions across multiple places within the same namespace.

Static class:
They cannot be instantiated nor be inherited.
All the properties and methods of a static class should be static.


Interface:
The set of rules/specifications for an entity is defined.
All methods and properties of an interface are public.
If a class implements an interface, it has to define all the methods of the interface.

Assemblies:

build artifacts(Protable Executable(PE)) +metadata (information about itself)

output of a project can be either exe or dll

exe: executable file - It will have a memory of its own.OS can directly invoke the exes.
dlls - dynamic link library - reusable piece of code which can be used across multiple projects. They will not have memory of their own. 
They reside in the memory of the host application and when the host applications gets closed, the dlls also gets closed.


1. To create a class lib:
dotnet new classlib -o MyLib --> dotnet build MyLib.csproj

2. exe project, give reference of dll in .csproj
  <ItemGroup>
    <ProjectReference Include="..\MyLib\MyLib.csproj" />
  </ItemGroup>



Day 4:
Exceptions:

Debugging: launch.json - console- externalTerminal

1. Syntax Error - rectified
2. Logical Error - debugged  - breakpoint,step into (f10, down arrow), step over(f11 and jump arrow) and step out(up arrow)
3. Runtime Error - cannot be rectified but can be handled.

Using the three blocks:
1. try
2. catch
3. finally

Exception class is the base class from which two derived classes are inherited:
1. SystemException - predefined or built in exceptions
2. ApplicationException - User defined exception

try block will contain those set of statements which might cause an exception. One try block can be followed by catch or finally.
catch block is the handler in which the exceptions are handled.
One try block can have multiple catch blocks and base class Exception catch block should be the last one.
finally block is called irrespective of the exception occurs or not. Mostly it contains code to release the resources. 

Collections:
1. Non-generic collections - All datatype values can be stored in non generic collections.
  ArrayList 
  Hashtable
2. Generic collections
  List
  Dictionary
  Stack
  Queue
  HashSet



















































